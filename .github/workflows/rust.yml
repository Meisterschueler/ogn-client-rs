name: Rust

on:
  push:
  pull_request:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      matrix:
        include:
### Tier 1 platforms ###
        - build: ARM64 Linux (kernel 4.1, glibc 2.17+), e.g. aws t4g.nano, ...
          os: ubuntu-latest
          rust: stable
          target: aarch64-unknown-linux-gnu
          linker: gcc-aarch64-linux-gnu
          cross: true

# i686-pc-windows-gnu
# i686-pc-windows-msvc
# i686-unknown-linux-gnu

        - build: 64-bit macOS (10.7+, Lion+)
          os: macos-latest
          rust: stable
          target: x86_64-apple-darwin

# x86_64-pc-windows-gnu

        - build: 64-bit MSVC (Windows 7+)
          os: windows-latest
          rust: stable
          target: x86_64-pc-windows-msvc

        - build: 64-bit Linux (kernel 3.2+, glibc 2.17), e.g. debian, ...
          os: ubuntu-latest
          rust: stable
          target: x86_64-unknown-linux-gnu

### Tier 2 platforms ###
#        - build: ARM64 Linux with MUSL, e.g. aws t4g.nano in alpine container, ...
#          os: ubuntu-latest
#          rust: stable
#          target: aarch64-unknown-linux-musl
#          linker: gcc-aarch64-linux-musl
#          cross: true

        - build: ARMv7 Linux, hardfloat (kernel 3.2, glibc 2.17), e.g. Raspberry Pi 2-3-4, ...
          os: ubuntu-latest
          rust: stable
          target: armv7-unknown-linux-gnueabihf
          linker: gcc-arm-linux-gnueabihf
          cross: true

#        - build: ARMv7 Linux with MUSL, hardfloat, e.g. Raspberry Pi 2-3-4, ...
#          os: ubuntu-latest
#          rust: stable
#          target: armv7-unknown-linux-musleabihf
#          linker: gcc-arm-linux-musleabihf
#          cross: true

#        - build: 64-bit Linux with MUSL, e.g. alpine, ...
#          os: ubuntu-latest
#          rust: stable
#          target: x86_64-unknown-linux-musl

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Install Rust
      run: rustup install ${{ matrix.rust }}
    
    - name: Add target
      run: rustup target add ${{ matrix.target }}
    
    - name: Install Linker
      if: matrix.cross
      run: |
        sudo apt update
        sudo apt install ${{ matrix.linker }}
    
    - name: Set names for binary and package
      shell: bash
      run: |
        if (${{ matrix.os == 'windows-latest' }});
          then echo "BINARY_NAME=ogn-client.exe"; 
          else echo "BINARY_NAME=ogn-client";
        fi >> $GITHUB_ENV
        echo "PACKAGE_NAME=ogn-client-${{ matrix.target }}.zip" >> $GITHUB_ENV

    - name: Run tests
      run: cargo test --verbose

    - name: Build
      run: cargo build --verbose --release --target ${{ matrix.target }}
    
    - name: List target
      shell: bash
      run: find ./target
    
    - name: Move binary to root directory
      shell: bash
      run: cp ./target/${{ matrix.target }}/release/${{ env.BINARY_NAME }} .
    
    - name: Compress with UPX
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'windows-latest'
      uses: crazy-max/ghaction-upx@v2
      with:
        version: latest
        files: |
          ${{ env.BINARY_NAME }}
        args: -fq
    
    - name: Package
      uses: vimtor/action-zip@v1
      with:
        files: ${{ env.BINARY_NAME }} CHANGELOG.md LICENSE
        dest: ${{ env.PACKAGE_NAME }}

    - name: Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/v')
      with:
        files: |
          ${{ env.PACKAGE_NAME }}
          CHANGELOG.md
          LICENSE
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
